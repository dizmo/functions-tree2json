{"version":3,"sources":["test.js"],"names":["Object","defineProperty","exports","value","chai_1","require","lib_1","lib_2","mock_1","describe","it","expect","tree2array","to","not","be","an","a","tree2object","a_array","TreeMock","nodes","deep","eq","b_array","c_array","array","undefined","a_object","b_object","_","i","j","k","c_object","x","y","z","object","b","c"],"mappings":"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","file":"test.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst chai_1 = require(\"chai\");\nconst lib_1 = require(\"../lib\");\nconst lib_2 = require(\"../lib\");\nconst mock_1 = require(\"./mock\");\nrequire(\"mocha\");\ndescribe(\"tree2array\", () => {\n    it(\"should exist\", () => {\n        chai_1.expect(lib_1.tree2array).to.not.be.an(\"undefined\");\n    });\n    it(\"should be a function\", () => {\n        chai_1.expect(lib_1.tree2array).to.be.a(\"function\");\n    });\n});\ndescribe(\"tree2object\", () => {\n    it(\"should exist\", () => {\n        chai_1.expect(lib_2.tree2object).to.not.be.an(\"undefined\");\n    });\n    it(\"should be a function\", () => {\n        chai_1.expect(lib_2.tree2object).to.be.a(\"function\");\n    });\n});\ndescribe(\"tree2array\", () => {\n    it(\"should map 'a' node of tree to an array\", () => {\n        const a_array = lib_1.tree2array(\"a\", mock_1.TreeMock.value, mock_1.TreeMock.nodes);\n        chai_1.expect(a_array).to.deep.eq([\"α\"]);\n    });\n    it(\"should map 'b' node of tree to an array\", () => {\n        const b_array = lib_1.tree2array(\"b\", mock_1.TreeMock.value, mock_1.TreeMock.nodes);\n        chai_1.expect(b_array).to.deep.eq([\"β\", [\"i\", [0]], [\"j\", [1]], [\"k\", [2]]]);\n    });\n    it(\"should map 'c' node of tree to an array\", () => {\n        const c_array = lib_1.tree2array(\"c\", mock_1.TreeMock.value, mock_1.TreeMock.nodes);\n        chai_1.expect(c_array).to.deep.eq([\"γ\", [\"x\", [\"ξ\", [\"y\", [\"υ\", [\"z\", [\"ζ\"]]]]]]]);\n    });\n    it(\"should map root node of tree to an array\", () => {\n        const array = lib_1.tree2array(null, mock_1.TreeMock.value, mock_1.TreeMock.nodes);\n        chai_1.expect(array).to.deep.eq([\n            undefined,\n            [\"a\", [\"α\"]],\n            [\"b\", [\"β\", [\"i\", [0]], [\"j\", [1]], [\"k\", [2]]]],\n            [\"c\", [\"γ\", [\"x\", [\"ξ\", [\"y\", [\"υ\", [\"z\", [\"ζ\"]]]]]]]],\n        ]);\n    });\n});\ndescribe(\"tree2object\", () => {\n    it(\"should map 'a' node of tree to a string\", () => {\n        const a_object = lib_2.tree2object(\"a\", mock_1.TreeMock.value, mock_1.TreeMock.nodes);\n        chai_1.expect(a_object).to.deep.eq(\"α\");\n    });\n    it(\"should map 'b' node of tree to an object\", () => {\n        const b_object = lib_2.tree2object(\"b\", mock_1.TreeMock.value, mock_1.TreeMock.nodes);\n        chai_1.expect(b_object).to.deep.eq({\n            _: \"β\", i: 0, j: 1, k: 2,\n        });\n    });\n    it(\"should map 'c' node of tree to an object\", () => {\n        const c_object = lib_2.tree2object(\"c\", mock_1.TreeMock.value, mock_1.TreeMock.nodes);\n        chai_1.expect(c_object).to.deep.eq({\n            _: \"γ\", x: { _: \"ξ\", y: { _: \"υ\", z: \"ζ\" } },\n        });\n    });\n    it(\"should map root node of tree to an object\", () => {\n        const object = lib_2.tree2object(null, mock_1.TreeMock.value, mock_1.TreeMock.nodes);\n        chai_1.expect(object).to.deep.eq({\n            a: \"α\",\n            b: { _: \"β\", i: 0, j: 1, k: 2 },\n            c: { _: \"γ\", x: { _: \"ξ\", y: { _: \"υ\", z: \"ζ\" } } },\n        });\n    });\n});\n"]}
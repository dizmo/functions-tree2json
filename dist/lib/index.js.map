{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","json2tree","root","item","mapper","endsWith","slice","key","hasOwnProperty","tree2json","lister","nodes","forEach","tree","node","default"],"mappings":"AAAA;;;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,MAA/B,EAAuC;AACnC,QAAIF,KAAKG,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACpBH,eAAOA,KAAKI,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACH;AACD,QAAI,QAAQH,IAAR,yCAAQA,IAAR,OAAkB,QAAlB,IAA8BA,SAAS,IAA3C,EAAiD;AAC7C,aAAK,IAAMI,GAAX,IAAkBJ,IAAlB,EAAwB;AACpB,gBAAIA,KAAKK,cAAL,CAAoBD,GAApB,CAAJ,EAA8B;AAC1B,oBAAI,CAACN,UAAaC,IAAb,SAAqBK,GAArB,EAA4BJ,KAAKI,GAAL,CAA5B,EAAuCH,MAAvC,CAAL,EAAqD;AACjD,2BAAO,KAAP;AACH;AACJ;AACJ;AACD,eAAO,IAAP;AACH,KATD,MAUK;AACD,eAAOA,OAAOF,IAAP,EAAaC,IAAb,MAAuB,KAA9B;AACH;AACJ;AACDJ,QAAQE,SAAR,GAAoBA,SAApB;AACA,SAASQ,SAAT,CAAmBP,IAAnB,EAAyBQ,MAAzB,EAAiCN,MAAjC,EAAyC;AACrC,QAAIF,KAAKG,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACpBH,eAAOA,KAAKI,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACH;AACD,QAAMK,QAAQD,OAAOR,IAAP,CAAd;AACA,QAAIS,SAASA,MAAMC,OAAnB,EAA4B;AACxB,YAAMC,OAAO,EAAb;AACAF,cAAMC,OAAN,CAAc,UAACE,IAAD,EAAU;AACpBD,iBAAKC,IAAL,IAAaL,UAAUK,IAAV,EAAgBJ,MAAhB,EAAwBN,MAAxB,CAAb;AACH,SAFD;AAGA,eAAOS,IAAP;AACH,KAND,MAOK;AACD,eAAOT,OAAOF,IAAP,CAAP;AACH;AACJ;AACDH,QAAQU,SAAR,GAAoBA,SAApB;AACAV,QAAQgB,OAAR,GAAkBN,SAAlB","file":"index.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction json2tree(root, item, mapper) {\n    if (root.endsWith(\"/\")) {\n        root = root.slice(0, -1);\n    }\n    if (typeof (item) === \"object\" && item !== null) {\n        for (const key in item) {\n            if (item.hasOwnProperty(key)) {\n                if (!json2tree(`${root}/${key}`, item[key], mapper)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    else {\n        return mapper(root, item) !== false;\n    }\n}\nexports.json2tree = json2tree;\nfunction tree2json(root, lister, mapper) {\n    if (root.endsWith(\"/\")) {\n        root = root.slice(0, -1);\n    }\n    const nodes = lister(root);\n    if (nodes && nodes.forEach) {\n        const tree = {};\n        nodes.forEach((node) => {\n            tree[node] = tree2json(node, lister, mapper);\n        });\n        return tree;\n    }\n    else {\n        return mapper(root);\n    }\n}\nexports.tree2json = tree2json;\nexports.default = tree2json;\n"]}
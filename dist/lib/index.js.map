{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","tree2array","t2a","path","nodes","separator","startsWith","slice","endsWith","my_nodes","length","my_array","forEach","node","i","tree2object","t2o","value_key","my_value","my_object","undefined","default"],"mappings":"AAAA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA;;;;;;;;;;;;;;;AAeAD,QAAQE,UAAR,GAAqB,SAASC,GAAT,CAAaC,IAAb,EAAmBH,KAAnB,EAA0BI,KAA1B,EAAkD;AAAA,QAAjBC,SAAiB,uEAAL,GAAK;;AACnE,QAAIF,SAAS,IAAT,IAAiBA,KAAKG,UAAL,CAAgBD,SAAhB,CAArB,EAAiD;AAC7CF,eAAOA,KAAKI,KAAL,CAAW,CAAX,CAAP;AACH;AACD,QAAIJ,SAAS,IAAT,IAAiBA,KAAKK,QAAL,CAAcH,SAAd,CAArB,EAA+C;AAC3CF,eAAOA,KAAKI,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACH;AACD,QAAME,WAAWL,MAAMD,IAAN,CAAjB;AACA,QAAIM,YAAYA,SAASC,MAAT,GAAkB,CAAlC,EAAqC;AACjC,YAAMC,WAAW,CACbX,MAAMG,IAAN,CADa,CAAjB;AAGAM,iBAASG,OAAT,CAAiB,UAACC,IAAD,EAAOC,CAAP,EAAa;AAC1BH,qBAASG,IAAI,CAAb,IAAkB,CAACD,IAAD,EAAOX,UAAOC,QAAQ,EAAf,IAAoBE,SAApB,GAAgCQ,IAAhC,EAAwCb,KAAxC,EAA+CI,KAA/C,EAAsDC,YAAYA,SAAlE,CAAP,CAAlB;AACH,SAFD;AAGA,eAAOM,QAAP;AACH,KARD,MASK;AACD,eAAO,CAACX,MAAMG,IAAN,CAAD,CAAP;AACH;AACJ,CApBD;AAqBA;;;;;;;;;;;;;;;AAeAJ,QAAQgB,WAAR,GAAsB,SAASC,GAAT,CAAab,IAAb,EAAmBH,KAAnB,EAA0BI,KAA1B,EAAmE;AAAA,QAAlCC,SAAkC,uEAAtB,GAAsB;AAAA,QAAjBY,SAAiB,uEAAL,GAAK;;AACrF,QAAId,SAAS,IAAT,IAAiBA,KAAKG,UAAL,CAAgBD,SAAhB,CAArB,EAAiD;AAC7CF,eAAOA,KAAKI,KAAL,CAAW,CAAX,CAAP;AACH;AACD,QAAIJ,SAAS,IAAT,IAAiBA,KAAKK,QAAL,CAAcH,SAAd,CAArB,EAA+C;AAC3CF,eAAOA,KAAKI,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACH;AACD,QAAMW,WAAWlB,MAAMG,IAAN,CAAjB;AACA,QAAMM,WAAWL,MAAMD,IAAN,CAAjB;AACA,QAAIM,YAAYA,SAASC,MAAT,GAAkB,CAAlC,EAAqC;AACjC,YAAMS,YAAY,EAAlB;AACA,YAAID,aAAaE,SAAjB,EAA4B;AACxBD,sBAAUF,SAAV,IAAuBC,QAAvB;AACH;AACDT,iBAASG,OAAT,CAAiB,UAACC,IAAD,EAAU;AACvBM,sBAAUN,IAAV,IAAkBG,UAAOb,QAAQ,EAAf,IAAoBE,SAApB,GAAgCQ,IAAhC,EAAwCb,KAAxC,EAA+CI,KAA/C,EAAsDC,YAAYA,SAAlE,EAA6EY,YAAYA,SAAzF,CAAlB;AACH,SAFD;AAGA,eAAOE,SAAP;AACH,KATD,MAUK;AACD,eAAOD,QAAP;AACH;AACJ,CAtBD;AAuBAnB,QAAQsB,OAAR,GAAkBtB,QAAQE,UAA1B","file":"index.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * For a given path traverses a tree-like structure in-order, and returns an\n * array containing the sub-tree of the corresponding node.\n *\n * The node value is reported as the first element of the array, after which\n * the subnodes are listed as second and consecutive elements. Further, each\n * of the values of the subnodes are packed in their own arrays as well.\n *\n * @param path path of a node to traverse, where `null` implies root\n * @param value value function returning the value of a node\n * @param nodes nodes function returning the subnodes of a node\n * @param separator separator string between path elements\n *\n * @returns an array representation of sub-tree\n */\nexports.tree2array = function t2a(path, value, nodes, separator = \"/\") {\n    if (path !== null && path.startsWith(separator)) {\n        path = path.slice(1);\n    }\n    if (path !== null && path.endsWith(separator)) {\n        path = path.slice(0, -1);\n    }\n    const my_nodes = nodes(path);\n    if (my_nodes && my_nodes.length > 0) {\n        const my_array = [\n            value(path),\n        ];\n        my_nodes.forEach((node, i) => {\n            my_array[i + 1] = [node, t2a(`${path || \"\"}${separator}${node}`, value, nodes, separator = separator)];\n        });\n        return my_array;\n    }\n    else {\n        return [value(path)];\n    }\n};\n/**\n * For a given path traverses a tree-like structure in-order, and returns an\n * object containing the sub-tree of the corresponding node. Also, if exists\n * the node value is reported by default as the \"underscore\" item within the\n * object.\n *\n * @param path path of a node to traverse, where `null` implies root\n * @param value value function returning the value of a node\n * @param nodes nodes function returning the subnodes of a node\n *\n * @param separator separator string between path elements\n * @param value_key default value key for node values\n *\n * @returns an array representation of sub-tree\n */\nexports.tree2object = function t2o(path, value, nodes, separator = \"/\", value_key = \"_\") {\n    if (path !== null && path.startsWith(separator)) {\n        path = path.slice(1);\n    }\n    if (path !== null && path.endsWith(separator)) {\n        path = path.slice(0, -1);\n    }\n    const my_value = value(path);\n    const my_nodes = nodes(path);\n    if (my_nodes && my_nodes.length > 0) {\n        const my_object = {};\n        if (my_value !== undefined) {\n            my_object[value_key] = my_value;\n        }\n        my_nodes.forEach((node) => {\n            my_object[node] = t2o(`${path || \"\"}${separator}${node}`, value, nodes, separator = separator, value_key = value_key);\n        });\n        return my_object;\n    }\n    else {\n        return my_value;\n    }\n};\nexports.default = exports.tree2array;\n"]}
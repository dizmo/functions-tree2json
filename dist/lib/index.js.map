{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","tree2array","t2a","path","nodes","separator","startsWith","slice","endsWith","my_nodes","length","my_array","forEach","node","i","tree2object","t2o","value_key","my_value","my_object","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * For a given path traverses a tree-like structure in-order, and returns an\n * array containing the sub-tree of the corresponding node.\n *\n * The node value is reported as the first element of the array, after which\n * the subnodes are listed as second and consecutive elements. Further, each\n * of the values of the subnodes are packed in their own arrays as well.\n *\n * @param path path of a node to traverse, where `null` implies root\n * @param value value function returning the value of a node\n * @param nodes nodes function returning the subnodes of a node\n * @param separator separator string between path elements\n *\n * @returns an array representation of sub-tree\n */\nexports.tree2array = function t2a(path, value, nodes, separator = \"/\") {\n    if (path !== null && path.startsWith(separator)) {\n        path = path.slice(1);\n    }\n    if (path !== null && path.endsWith(separator)) {\n        path = path.slice(0, -1);\n    }\n    const my_nodes = nodes(path);\n    if (my_nodes && my_nodes.length > 0) {\n        const my_array = [\n            value(path),\n        ];\n        my_nodes.forEach((node, i) => {\n            my_array[i + 1] = [node, t2a(`${path || \"\"}${separator}${node}`, value, nodes, separator = separator)];\n        });\n        return my_array;\n    }\n    else {\n        return [value(path)];\n    }\n};\n/**\n * For a given path traverses a tree-like structure in-order, and returns an\n * object containing the sub-tree of the corresponding node. Also, if exists\n * the node value is reported by default as the \"underscore\" item within the\n * object.\n *\n * @param path path of a node to traverse, where `null` implies root\n * @param value value function returning the value of a node\n * @param nodes nodes function returning the subnodes of a node\n *\n * @param separator separator string between path elements\n * @param value_key default value key for node values\n *\n * @returns an array representation of sub-tree\n */\nexports.tree2object = function t2o(path, value, nodes, separator = \"/\", value_key = \"_\") {\n    if (path !== null && path.startsWith(separator)) {\n        path = path.slice(1);\n    }\n    if (path !== null && path.endsWith(separator)) {\n        path = path.slice(0, -1);\n    }\n    const my_value = value(path);\n    const my_nodes = nodes(path);\n    if (my_nodes && my_nodes.length > 0) {\n        const my_object = {};\n        if (my_value !== undefined) {\n            my_object[value_key] = my_value;\n        }\n        my_nodes.forEach((node) => {\n            my_object[node] = t2o(`${path || \"\"}${separator}${node}`, value, nodes, separator = separator, value_key = value_key);\n        });\n        return my_object;\n    }\n    else {\n        return my_value;\n    }\n};\nexports.default = exports.tree2array;\n"],"file":"index.js"}
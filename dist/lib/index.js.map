{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","tree2array","t2a","path","nodes","sep","startsWith","slice","endsWith","my_nodes","length","my_array","forEach","n","i","tree2object","t2o","value_key","my_value","my_object","undefined","node","default"],"mappings":"AAAA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACAD,QAAQE,UAAR,GAAqB,SAASC,GAAT,CAAaC,IAAb,EAAmBH,KAAnB,EAA0BI,KAA1B,EAA4C;AAAA,QAAXC,GAAW,uEAAL,GAAK;;AAC7D,QAAIF,SAAS,IAAT,IAAiBA,KAAKG,UAAL,CAAgBD,GAAhB,CAArB,EAA2C;AACvCF,eAAOA,KAAKI,KAAL,CAAW,CAAX,CAAP;AACH;AACD,QAAIJ,SAAS,IAAT,IAAiBA,KAAKK,QAAL,CAAcH,GAAd,CAArB,EAAyC;AACrCF,eAAOA,KAAKI,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACH;AACD,QAAME,WAAWL,MAAMD,IAAN,CAAjB;AACA,QAAIM,YAAYA,SAASC,MAAT,GAAkB,CAAlC,EAAqC;AACjC,YAAMC,WAAW,CACbX,MAAMG,IAAN,CADa,CAAjB;AAGAM,iBAASG,OAAT,CAAiB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACvBH,qBAASG,IAAI,CAAb,IAAkB,CAACD,CAAD,EAAIX,UAAOC,QAAQ,EAAf,IAAoBE,GAApB,GAA0BQ,CAA1B,EAA+Bb,KAA/B,EAAsCI,KAAtC,CAAJ,CAAlB;AACH,SAFD;AAGA,eAAOO,QAAP;AACH,KARD,MASK;AACD,eAAO,CAACX,MAAMG,IAAN,CAAD,CAAP;AACH;AACJ,CApBD;AAqBAJ,QAAQgB,WAAR,GAAsB,SAASC,GAAT,CAAab,IAAb,EAAmBH,KAAnB,EAA0BI,KAA1B,EAA6D;AAAA,QAA5BC,GAA4B,uEAAtB,GAAsB;AAAA,QAAjBY,SAAiB,uEAAL,GAAK;;AAC/E,QAAId,SAAS,IAAT,IAAiBA,KAAKG,UAAL,CAAgBD,GAAhB,CAArB,EAA2C;AACvCF,eAAOA,KAAKI,KAAL,CAAW,CAAX,CAAP;AACH;AACD,QAAIJ,SAAS,IAAT,IAAiBA,KAAKK,QAAL,CAAcH,GAAd,CAArB,EAAyC;AACrCF,eAAOA,KAAKI,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACH;AACD,QAAMW,WAAWlB,MAAMG,IAAN,CAAjB;AACA,QAAMM,WAAWL,MAAMD,IAAN,CAAjB;AACA,QAAIM,YAAYA,SAASC,MAAT,GAAkB,CAAlC,EAAqC;AACjC,YAAMS,YAAY,EAAlB;AACA,YAAID,aAAaE,SAAjB,EAA4B;AACxBD,sBAAUF,SAAV,IAAuBC,QAAvB;AACH;AACDT,iBAASG,OAAT,CAAiB,UAACS,IAAD,EAAU;AACvBF,sBAAUE,IAAV,IAAkBL,UAAOb,QAAQ,EAAf,IAAoBE,GAApB,GAA0BgB,IAA1B,EAAkCrB,KAAlC,EAAyCI,KAAzC,CAAlB;AACH,SAFD;AAGA,eAAOe,SAAP;AACH,KATD,MAUK;AACD,eAAOD,QAAP;AACH;AACJ,CAtBD;AAuBAnB,QAAQuB,OAAR,GAAkBvB,QAAQE,UAA1B","file":"index.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tree2array = function t2a(path, value, nodes, sep = \"/\") {\n    if (path !== null && path.startsWith(sep)) {\n        path = path.slice(1);\n    }\n    if (path !== null && path.endsWith(sep)) {\n        path = path.slice(0, -1);\n    }\n    const my_nodes = nodes(path);\n    if (my_nodes && my_nodes.length > 0) {\n        const my_array = [\n            value(path),\n        ];\n        my_nodes.forEach((n, i) => {\n            my_array[i + 1] = [n, t2a(`${path || \"\"}${sep}${n}`, value, nodes)];\n        });\n        return my_array;\n    }\n    else {\n        return [value(path)];\n    }\n};\nexports.tree2object = function t2o(path, value, nodes, sep = \"/\", value_key = \"_\") {\n    if (path !== null && path.startsWith(sep)) {\n        path = path.slice(1);\n    }\n    if (path !== null && path.endsWith(sep)) {\n        path = path.slice(0, -1);\n    }\n    const my_value = value(path);\n    const my_nodes = nodes(path);\n    if (my_nodes && my_nodes.length > 0) {\n        const my_object = {};\n        if (my_value !== undefined) {\n            my_object[value_key] = my_value;\n        }\n        my_nodes.forEach((node) => {\n            my_object[node] = t2o(`${path || \"\"}${sep}${node}`, value, nodes);\n        });\n        return my_object;\n    }\n    else {\n        return my_value;\n    }\n};\nexports.default = exports.tree2array;\n"]}